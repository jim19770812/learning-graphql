<?xml version="1.0" encoding="UTF-8"?>
<!--
scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="false" scanPeriod="60 seconds" debug="false">
    <!-- 定义日志的根目录 -->
    <springProperty scope="context" name="LOG_HOME" source="logger.path" defaultValue="/tmp/memfs"/>
    <!-- 定义日志文件名称 -->
    <property name="appName" value="lg" />
    <!-- ch.qos.logback.core.ConsoleAppender 表示控制台输出 -->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <!--
        日志输出格式：
            %d表示日期时间，
            %thread表示线程名，
            %-5level：级别从左显示5个字符宽度
            %logger{50} 表示logger名字最长50个字符，否则按照句点分割。
            %msg：日志消息，
            %n是换行符
        -->
        <layout class="ch.qos.logback.classic.PatternLayout">
<!--            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}[%-5level][%thread][%logger{100}]-> %msg%n</pattern>
        </layout>
    </appender>

    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <appender name="appLogAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 指定日志文件的名称 -->
        <file>${LOG_HOME:-.}/${appName}.log</file>
        <!--
        当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名
        TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--
            滚动时产生的文件的存放位置及文件名称 %d{yyyy-MM-dd}：按天进行日志滚动
            %i：当文件大小超过maxFileSize时，按照i进行文件滚动
            -->
            <fileNamePattern>${LOG_HOME:-.}/${appName}-%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <!--
            可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每天滚动，
            且maxHistory是365，则只保存最近365天的文件，删除之前的旧文件。注意，删除旧文件是，
            那些为了归档而创建的目录也会被删除。
            -->
            <MaxHistory>365</MaxHistory>
            <!--
            当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动 注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!-- 日志输出格式： -->
        <layout class="ch.qos.logback.classic.PatternLayout">
<!--            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [ %thread ] - [ %-5level ] [ %logger{50} : %line ] - %msg%n</pattern>-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}[%-5level][%thread][%logger{100}]-> %msg%n</pattern>
        </layout>
    </appender>

    <!--
        logger主要用于存放日志对象，也可以定义日志类型、级别
        name：表示匹配的logger类型前缀，也就是包的前半部分
        level：要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR
        additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，
        false：表示只用当前logger的appender-ref，
        true：表示当前logger的appender-ref和rootLogger的appender-ref都有效
    -->
    <!--
        logger是记录Logger对象输出的日志级别的
        　　sercvice实现类引入日志对象可以查看方法的报错信息以及打印sql语句，public static final Logger logger = LoggerFactory.getLogger(SysUserServiceImpl.class);
   　　　生产环境：
　　　　　　　一般把level设为error，可以记录错误的日志信息，毕竟主要是要记录错误信息进行错误定位。
　　　　　开发环境：
　　　　　　　类中引入了logger日志对象时，level级别用info,debug都可以，都有错误信息输出。
　　 -->

    <!-- jdk logger -->
    <logger name="sun.net.www.protocol.http.HttpURLConnection" level="ERROR"/>
    <logger name="javax.activation.*" level="ERROR"/>
    <logger name="com.sun.xml.bind" level="ERROR" />
    <logger name="javax.xml.bind" level="ERROR" />
    <logger name="com.sun.xml.internal.xsom.parser.JAXPParser" level="ERROR" />
    <logger name="org.xnio.nio" level="ERROR" />
    <logger name="io.netty.util.internal.NativeLibraryLoader" level="ERROR" />

    <!-- netty/undertow logger -->
    <logger name="io.netty.util.internal.PlatformDependent0" level="ERROR" />
    <logger name="io.netty.util.internal.PlatformDependent" level="ERROR" />
    <logger name="io.netty.util.internal.InternalThreadLocalMap" level="ERROR" />
    <logger name="io.netty.util.ResourceLeakDetector" level="ERROR" />

    <!-- apache cxf logger -->
    <logger name="org.apache.cxf.phase.PhaseInterceptorChain" level="ERROR" />
    <logger name="org.apache.cxf.jaxws.interceptors.HolderInInterceptor" level="ERROR" />
    <logger name="org.apache.cxf.*" level="ERROR"/>
    <logger name="org.apache.cxf.endpoint.ClientImpl" level="ERROR"/>
    <logger name="com.sun.xml.internal.bind.v2.util.XmlFactory" level="ERROR" />
    <logger name="org.apache.cxf.common.util.ProxyHelper" level="ERROR" />
    <logger name="org.apache.cxf.configuration.spring.ConfigurerImpl" level="ERROR" />
    <logger name="org.apache.cxf.jaxws.interceptors.HolderOutInterceptor" level="ERROR" />
    <logger name="org.apache.cxf.transport.http.HTTPConduit" level="ERROR" />
    <logger name="org.apache.cxf.ws.policy.PolicyVerificationInInterceptor" level="ERROR" />
    <logger name="org.apache.cxf.transport.http.Headers" level="ERROR" />
    <logger name="org.apache.cxf.endpoint.dynamic.DynamicClientFactory" level="ERROR" />
    <logger name="org.apache.cxf.interceptor.OutgoingChainInterceptor" level="ERROR" />
    <logger name="org.apache.cxf.ws.addressing.ContextUtils" level="ERROR" />
    <logger name="org.apache.cxf.transport.http.AbstractHTTPDestination" level="ERROR" />
    <logger name="org.apache.cxf.jaxws.handler.AnnotationHandlerChainBuilder" level="ERROR" />
    <logger name="org.apache.cxf.resource.DefaultResourceManager" level="ERROR" />
    <logger name="org.apache.cxf.endpoint.ServerImpl" level="ERROR" />
    <logger name="org.apache.cxf.transport.servlet.ServletDestination" level="ERROR" />
    <logger name="org.apache.cxf.wsdl.service.factory.ReflectionServiceFactoryBean" level="ERROR" />
    <logger name="org.apache.cxf.jaxb.JAXBDataBinding" level="ERROR" />
    <logger name="org.apache.cxf.wsdl11.WSDLServiceBuilder" level="ERROR" />

    <!-- apache hadoop/zookeeper logger -->
    <logger name="org.apache.zookeeper.ClientCnxn" level="ERROR"/>
    <logger name="org.apache.zookeeper.*" level="ERROR"/>
    <logger name="org.apache.zookeeper.ZooKeeper" level="ERROR"/>
    <logger name="org.apache.hadoop.security.authentication.util.KerberosName" level="ERROR" />
    <logger name="org.apache.hadoop.metrics2.impl.MetricsSystemImpl" level="ERROR" />
    <logger name="org.apache.hadoop.security.Groups" level="ERROR" />
    <logger name="org.apache.hadoop.util.NativeCodeLoader" level="ERROR" />
    <logger name="org.apache.hadoop.security.JniBasedUnixGroupsMappingWithFallback" level="ERROR" />
    <logger name="org.apache.hadoop.metrics2.lib.MutableMetricsFactory" level="ERROR" />
    <logger name="org.apache.hadoop.security.UserGroupInformation" level="ERROR" />
    <logger name="org.apache.hadoop.util.Shell" level="OFF" />
    <logger name="org.apache.hadoop.hbase.zookeeper.RecoverableZooKeeper" level="ERROR" />
    <logger name="org.apache.hadoop.hbase.zookeeper.ZooKeeperWatcher" level="ERROR" />

    <!-- Spring framework logger -->
    <logger name="org.springframework.*" level="ERROR"/>
    <logger name="org.springframework.beans.CachedIntrospectionResults" level="ERROR" />
    <logger name="org.springframework.beans.factory.support.DefaultListableBeanFactory" level="ERROR" />
    <logger name="org.springframework.data.convert.CustomConversions" level="ERROR" />
    <logger name="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor" level="ERROR" />
    <logger name="org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver" level="ERROR" />
    <logger name="org.springframework.context.annotation.ClassPathBeanDefinitionScanner" level="ERROR" />
    <logger name="org.springframework.core.env.PropertySourcesPropertyResolver" level="ERROR" />
    <logger name="org.springframework.boot.web.servlet.RegistrationBean" level="ERROR" />
    <logger name="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter" level="ERROR" />
    <logger name="org.springframework.beans.factory.xml.XmlBeanDefinitionReader" level="ERROR" />
    <logger name="org.springframework.data.repository.config.RepositoryConfigurationDelegate" level="ERROR" />
    <logger name="org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory" level="ERROR" />
    <logger name="org.springframework.boot.web.servlet.ServletContextInitializerBeans" level="ERROR" />
    <logger name="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" level="ERROR" />
    <logger name="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping" level="ERROR" />
    <logger name="org.springframework.data.redis.listener.RedisMessageListenerContainer" level="ERROR" />
    <logger name="org.springframework.context.support.DefaultLifecycleProcessor" level="ERROR" />
    <logger name="org.springframework.boot.web.servlet.filter.OrderedCharacterEncodingFilter" level="ERROR" />
    <logger name="org.springframework.boot.web.servlet.filter.OrderedFormContentFilter" level="ERROR" />
    <logger name="org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate" level="ERROR" />
    <logger name="org.springframework.test.context.cache" level="ERROR" />
    <logger name="org.springframework.test.context.web.ServletTestExecutionListener" level="ERROR" />
    <logger name="org.springframework.test.context.support.AbstractDirtiesContextTestExecutionListener" level="ERROR" />

    <!-- validator logger -->
    <logger name="org.hibernate.validator.internal.engine.ValidatorFactoryConfigurationHelper" level="ERROR"/>
    <logger name="org.hibernate.validator.internal.engine.AbstractConfigurationImpl" level="ERROR" />
    <logger name="org.hibernate.validator.internal.xml.config.ResourceLoaderHelper" level="ERROR" />
    <logger name="org.hibernate.validator.internal.util.Version" level="ERROR" />
    <logger name="org.hibernate.validator.internal.xml.config.ValidationXmlParser" level="ERROR" />
    <logger name="org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator" level="ERROR" />
    <logger name="org.hibernate.validator.internal.engine.resolver.TraversableResolvers" level="ERROR" />

    <!-- inrevo taskflow -->
    <logger name="com.inrevo.taskflow.series.impl.ITFlowSeriesImpl" level="ERROR" />
    <logger name="com.inrevo.taskflow.series.ITSeriesThread" level="ERROR" />
    <logger name="com.inrevo.taskflow.engine.impl.ITBlockingFlowSeriesAdvancerImpl" level="ERROR" />
    <logger name="com.inrevo.processflow.core.engine.ITProcessFlowEngine" level="ERROR" />
    <logger name="com.inrevo.taskflow.nodes.impl.AbstractITNode" level="ERROR" />
    <logger name="com.inrevo.processflow.core.engine.nodes.ITActorExecuteNode" level="ERROR" />
    <logger name="com.inrevo.taskflow.engine.impl.ITFlowEngineImpl" level="ERROR" />
    <logger name="com.inrevo.processflow.core.engine.ITExecutionNodeEventBusHandle" level="ERROR" />
    <logger name="com.inrevo.hbase.supports.HbaseAccessor" level="ERROR" />

    <!--
    root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，
    要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。
    -->
    <!-- 一般用默认的info就可以 -->
    <root level="DEBUG">
        <!-- 控制台输出日志-->
        <appender-ref ref="stdout" />
        <!--
        开发环境：
            不需要往文件记录日志，可以把这个appender-ref ref="appLogAppender"注释，上面那个往文件写日志的appender也要注释,不然每天都产生一个空文件；
        生产环境：
            需要往文件记录日志，此时appender-ref ref="appLogAppender"就不能注释了，不然没日志记录到文件，上面那个往文件写日志的appender也要放开。
         -->
        <appender-ref ref="appLogAppender" />
    </root>
</configuration>